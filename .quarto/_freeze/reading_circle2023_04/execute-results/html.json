{
  "hash": "269f12d5f39339b440468e9a84f55320",
  "result": {
    "markdown": "---\ntitle: \"コードの高速化\"\nauthor: \"鈴木優太\"\nformat: \n  revealjs:\n    highlight-style: github\n    theme: static/theme.css\n    slide-number: c/t\n---\n\n## 処理の高速化をする４つの方法\n<hr>\n動くプログラムを作成した後に処理の高速化を考える際、参考になる\n４つの考え方を紹介します。\n\n- 組み込み関数の使用\n\n- 外部モジュールの使用\n\n- アルゴリズムの最適化\n\n\n実行環境<br>\n[python3.10.10](https://docs.python.org/3.10/)<br>\n[Numpy1.24.2](https://numpy.org/)\n\n\n## 組み込み関数を使おう\n<hr>\n\n<span style=\"font-size:75%\">1から100000000までの数の総和を計算する。</span><br>\n自作コードの使用\n```python\nimport time\nstart_time = time.time()\ntotal = 0\nfor i in range(1,100000001):\n    total += i\nend_time = time.time()\nprint(\"計算結果:\",total,\"\\nsumの処理時間: \", end_time - start_time)\n#forループの処理時間: 8.668177366256714\n```\n\n組み込み関数（sum()）の使用\n```python\nimport time\nstart_time = time.time()\ntotal = sum(list(range(1,100000001)))\nend_time = time.time()\nprint(\"計算結果:\",total,\"\\nsumの処理時間: \", end_time - start_time)\n#forループの処理時間:4.457662105560303\n```\n\n## 外部モジュールを使おう\n<hr>\nプログラミング言語により処理速度が異なり、<br>\npythonは処理速度が遅い。<br>\n外部モジュールを用いることで早い言語で処理を行える。\n\n\nNumpyを使用\n```python\nimport time\nstart_time = time.time()\nimport numpy\ntotal = numpy.sum(numpy.arange(1,100000001))\nend_time = time.time()\nprint(\"計算結果:\",total,\"\\nnumpyの処理時間: \", end_time - start_time)\n#forループの処理時間:0.5025210380554199\n```\n実用例：RでCNSとSVの重なりを[biocoductor](https://www.bioconductor.org/)で検出\n\n## アルゴリズムを見直そう\n<hr>\nアルゴリズムを見直す際以下の視点がある。<br>\n- 同じ処理をまとめる<br>\n- データの読み書きを減らす<br>\n- 型の変換を減らす<br>\n\n総和の公式($\\frac n2(1+n)$)を使用\n```python\nstart_time = time.time()\ntotal = int(100000000*(1+100000001)/2)\nend_time = time.time()\nprint(\"計算結果:\",total,\"\\nアルゴリズムの変更後の処理時間: \", end_time - start_time)\n#forループの処理時間:1.1920928955078125e-06\n```\n\n## 注意点\n\n- 高速化後は結果が変わっていないかを確認しよう<br>\n計算過程に少数が入ると整数への変換時に結果が変わることがある\n```python\nprint(3/2 + 2/3) # 2.16666\nprint(int(2/3) + int(3/2)) #1\n```\n<br>\n\n\n- 適切な方法を使おう<br>\n処理によっては紹介した方法では遅くなる場合もある<br>\n１行づつ実行し遅い箇所を特定し最適な方法を探そう\n\n## おまけ1：並列化をしよう\n<hr>\n複数の処理を同時におこなったり、処理を分割して<br>並列処理することで速度が上がることがある。<br>\n```{python3,hightlight = TRUE}\nimport time\nstart_time = time.time()\nfrom multiprocessing import Process, Value, Lock\ndef cal(start, end, sum_cal, lock):\n    local_sum = 0\n    for i in range(start, end+1):\n        local_sum += i\n    with lock:\n        sum_cal.value +=local_sum\nif __name__ == '__main__':\n    n =  100000000\n    sum_cal = Value('l', 0)\n    lock = Lock()\n    half = int(n/2)\n    p1 = Process(target=cal, args=(1, half, sum_cal, lock))\n    p2 = Process(target=cal, args=(half+1, n, sum_cal, lock))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    total_sum = sum_cal.value\n    end_time = time.time()\n    print(total_sum,end_time - start_time)\n```\n\n\n## おまけ2：言語を見直そう\n<hr>\n\nコンパイル型言語の使用によりインタプリンタ型言語の<br>\n高速化と同じ結果が望める。\n\n```C++\n#include <iostream>\n#include <chrono>\nusing namespace std;\nint main()\n{   int n = 100000000;\n    long sum_ = 0;\n    auto start = chrono::steady_clock::now(); // 開始時刻\n    for (int i = 1; i <= n; i++) {\n        sum_ += i;}\n    auto end = chrono::steady_clock::now(); // 終了時刻\n    auto diff = end - start; // 経過時間\n    cout << \"Sum = \" << sum_ << endl;\n    cout << \"Elapsed time = \" << chrono::duration<double, milli>(diff).count() << \" ms\" << endl;\n    return 0;}\n/*C++でのfor文処理時間:0.224624*/\n```\n<span style=\"font-size:50%\">[chatGPT](https://openai.com/blog/chatgpt)により生成したものを修正</span>\n\n",
    "supporting": [
      "reading_circle2023_04_files"
    ],
    "filters": [],
    "includes": {}
  }
}