---
title: "インストール概要"
subtitle: "ソースからって何？brewって何がいいの？"
author: "鈴木優太"
format: 
  revealjs:
    highlight-style: github
    slide-number: c/t
css: style.css
---

## はじめに


**ソフトウェアのインストールは公式で推奨された方法を    
可能な限り使ってください**  

<br>

実行環境<br>

* macOS Monterey 12.6.6
* gcc 13.1.0

参考文献<br>

* [Homebrew公式サイト](https://brew.sh/index_ja)
* [メタルさんサイト](https://heavywatal.github.io/about.html)

## 環境構築は大変

理想的な研究 <span style="font-size:50%">出典:いらすとや、[Homebrew](https://brew.sh/index_ja)</span>
<br>
![](image/ideal_research.png){height="220"}

現実の研究
<br>
![](image/real_research.png){height="220"}


# 事前知識

* バイナリーデータ
* コンパイル

## 人とパソコンは言語が違う

![](image/human_hello.png){width="500"}

![](image/pc_hello.png){width="500"}

パソコンが理解できるデータを**バイナリーデータ**と言う

## プログラムは翻訳され実行される

![](image/intractive.png){width="1000"}

プログラムを翻訳する操作を**コンパイル**とよぶ。

## コンパイルの扱いは言語ごとに違う

* コンパイル言語（Go、C++、Java）  
一度コンパイルしたファイルを使い回す
![](image/compile_language.png){width="700"}  



* インタプリタ言語（Python、R、Javascript）  
実行するたびにコンパイルする
![](image/interprinter.png){width="700"}  

## インストールってなに？

ソフトウェアをパソコンへ導入し、使用可能な状態にする処理や作業のこと

<br>

ソフトウェアのインストールには2種の方針がある<br>

* ソースコードからソフトウェアを構築する  
（ソースからビルド）
* パッケージマネージャーを使用する  
（Homebrew,condaなど）


## ソースコードからのインストール

### コンパイル言語の場合

1. ソースコードのダウンロード
2. コンパイル用のファイルを作成（ない場合もある）
3. コンパイル実行
4. 実行ファイルがある場所へパスを通す

### インタプリタ言語の場合

1. ソースコードのダウンロード
2. ダウンロードした場所へパスを通す

## コンパイル言語インストール体験
1. ソースコードのダウンロード
``` sh
git clone https://github.com/YutaSSuzuki/install_practice.git
```
2. コンパイル用のファイル（Makefile）を作成：  
``` sh
cd compile
./configure
 ```
3. コンパイル実行（実行ファイルを作成）:  
``` sh
make
```


## コンパイル言語インストール体験
4. パスを通す:  
``` sh
pwd #出力結果をコピー
nano ~/.zshrc #shellの種類に応じて_の前を変更

# .zshrc内の一番下の行に以下の内容を追記
export PATH="コピー内容をペースト:$PATH"

source ~/.zshrc
```
<br>
プログラムの実行  
``` sh
prime
```
<br>

🔰 好きな整数を半角で入力し、素数判定を行う  
🔰 ディレクトリを移動し`prime`を実行しよう


## インタプリタ言語インストール体験

1. pythonコードのダウンロード
```sh
#今回はすでに終わっています。
#git clone https://github.com/YutaSSuzuki/install_practice.git
```

2. パスを通す
```sh
cd ../interpreter
pwd #出力結果をコピー
nano ~/.zshrc #shellの種類に応じて_の前を変更

# zshrc内の一番下の行に以下の内容を追記
export PATH="コピー内容をペースト:$PATH"
source ~/.zshrc
```
プログラムの実行  
``` sh
prime.py
```

<br>

🔰 好きな整数を半角で入力し、素数判定を行う  
🔰 ディレクトリを移動し`prime.py`を実行しよう

## 余談：新しい`Makefile`作成CMake



* 高速
* 作成側とインストール側の両方でCMakeのインストールが必要

使用時は空のディレクトリを作成し、その中で実行する

```sh
mkdir build 
cd build
cmake <CMakeLists.txtが配置されたディレクトリ>
make
```

## パッケージマネージャーとは？

ソフトウェアのインストールやバージョン管理を行う  
ソフトのこと  

<br>

Homebrew、condaなどはその代表例

<br>

以下の利点がある

* インストールをコマンド１つで行える
* アップデートの際、ソフトを入れ直す必要がない
* インストールに必要なものを全て入れてくれる



## [Homebrew](https://brew.sh/index_ja)って何？

MacOS、Linux用のパッケージマネージャー  

公式が公開したものだけでなく、個人が公開した<br>ソフトウェアもインストールできる

* ソフトウェアのインストール

```sh
brew install <ソフト名>
```

* インストールしたソフトの一覧表示

```sh
brew list 
```

* Homebrewで入れたソフトのアップデート

```sh
brew update
```

## 便利機能

### bottle

バイナリーデータを直接ダウンロードする。

以下の条件下で使用できなくなるので注意

* MacOSのバージョンが対応していない
* Homebrewがデフォルトの場所にインストールされてい

### cask

GUIのソフトウェアをインストールできる。<br>
例）Rstudio

```sh
brew install --cask rstudio
```

## インストール時のエラー対応


* パッケージマネージャーを使用
* バイナリーデータを直接ダウンロード
* ソフトウェアのissueを確認


## 解決が難しい状況

* 管理者権限がない
  
* 必須のソフトの配布が終了している

### 対応策

* [Apptainer](https://apptainer.org/)など構築済みのものをパスを指定して使用する
* 別のソフトウェアを探す
* 環境を変える  
  * DDBJからScorpionへ移動する
